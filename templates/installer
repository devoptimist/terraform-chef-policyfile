%{ if system == "linux" }
#!/bin/bash
set -ex
exec > ${tmp_path}/chef_installer.log 2>&1

function install_chef {
  curl -LO https://www.chef.io/chef/install.sh && sudo bash ./install.sh -P chef-workstation -v ${chef_bootstrap_version}
}

function install_jq {
  path="${tmp_path}/bin"
  if [[ ! -d $path ]]; then
    sudo mkdir -p $path
  fi

  jq_path="${tmp_path}/bin/jq"
  if [[ ! -f jq_path ]]; then
    if hash curl; then
      sudo curl -L -o $jq_path ${jq_linux_url} && sudo chmod 755 $jq_path
    else
      sudo wget -O $jq_path ${jq_linux_url} && sudo chmod 755 $jq_path
    fi
  fi
}

function run_chef {
  export PATH=$PATH:/opt/chef-workstation/embedded/bin:/opt/chef-workstation/gitbin/:${tmp_path}/bin
  if [[ -f ${tmp_path}/Policyfile.lock.json ]]; then
    sudo rm -f ${tmp_path}/Policyfile.lock.json
  fi

  chef install ${tmp_path}/Policyfile.rb --chef-license accept-silent
  chef export ${tmp_path}/Policyfile.rb . -a

  if [[ -f ${tmp_path}/cookbooks.tgz ]]; then
    sudo rm -f ${tmp_path}/cookbooks.tgz
  fi

  mv ${policyfile_name}-*.tgz ${tmp_path}/cookbooks.tgz

  if [[ -f ${tmp_path}/dna_extra.json ]]; then
    jq -s '.[0] * .[1]' ${tmp_path}/dna_base.json ${tmp_path}/dna_extra.json > ${tmp_path}/dna.json
  else
    cat ${tmp_path}/dna_base.json > ${tmp_path}/dna.json
  fi

  sudo env "PATH=$PATH:/usr/sbin/" chef-solo --recipe-url ${tmp_path}/cookbooks.tgz -j ${tmp_path}/dna.json --chef-license accept-silent
}

function hook_stamp {
  echo "{\"hostname\":\"$(hostname)\"}" | jq '.' > ${tmp_path}/hook_read_back.json
}

install_jq

if sed 's/"//g' /etc/os-release |grep -e '^NAME=CentOS' -e '^NAME=Fedora' -e '^NAME=Red' -e '^NAME=SLES'
then
  if ! rpm -q chef-workstation-${chef_bootstrap_version}; then
    install_chef
  fi
elif sed 's/"//g' /etc/os-release |grep -e '^NAME=Mint' -e '^NAME=Ubuntu' -e '^NAME=Debian'
then
  if $(dpkg --compare-versions $(dpkg-query -f='$${Version}' --show chef-workstation) ne ${chef_bootstrap_version}-1); then
    install_chef
  fi
fi

run_chef
hook_stamp
exit 0
%{ endif }

%{ if system == "windows" }

function install_chef {
  . { iwr https://omnitruck.chef.io/install.ps1 } | iex; install -project chef-workstation -version ${chef_bootstrap_version}
}

function install_jq {
  $tmp_bin = "${tmp_path}\bin"
  if(!(test-path $tmp_bin)) {
    New-Item -ItemType Directory -Force -Path $tmp_bin
  }

  $jq_path = "$${tmp_bin}\jq.exe"
  if(!(test-path $jq_path)) {
    $ProgressPreference = 'SilentlyContinue'
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Invoke-WebRequest ${jq_windows_url} -OutFile $jq_path
  }
}

function run_chef {
  $env:Path += ";C:\opscode\chef-workstation\embedded\git\bin\"
  $env:Path += ";C:\opscode\chef-workstation\bin\"
  $env:Path += ";${tmp_path}\bin"

  $policyfile_lock = "${tmp_path}\Policyfile.lock.json"
  if(Test-Path $policyfile_lock) 
  {
    Remove-Item $policyfile_lock
  }

  chef install ${tmp_path}\Policyfile.rb --chef-license accept-silent
  chef export ${tmp_path}\Policyfile.rb . -a

  $cookbook_path = "${tmp_path}\cookbooks.tgz"
  if(Test-Path $cookbook_path)
  {
    Remove-Item $cookbook_path
  }
  mv ${policyfile_name}-*.tgz ${tmp_path}\cookbooks.tgz

  if(Test-Path ${tmp_path}\dna_extra.json) {
    jq -s '.[0] * .[1]' ${tmp_path}\dna_base.json ${tmp_path}\dna_extra.json > ${tmp_path}\dna.json
  }else {
    cp ${tmp_path}\dna_base.json ${tmp_path}\dna.json
  }
  chef-solo --recipe-url ${tmp_path}\cookbooks.tgz -j ${tmp_path}\dna.json --chef-license accept-silent
}

install_jq
install_chef
run_chef

%{ endif }
